#Payment Card
package the_Seven;

public class PaymentCard {
    private double balance;

    public PaymentCard(double balance) {
        this.balance = balance;
    }

    public double balance() {
        return this.balance;
    }

    public void addMoney(double increase) {
        this.balance = this.balance + increase;
    }

    public boolean takeMoney(double amount) {
        if(this.balance>amount) {
        	this.balance=this.balance-amount;
        	return true;
        }
        else {
        	 return false;
        }
       
    }
    
    public static void main(String[] args) {
        PaymentCard petesCard = new PaymentCard(10);

        System.out.println("money " + petesCard.balance());
        boolean wasSuccessful = petesCard.takeMoney(8);
        System.out.println("successfully withdrew: " + wasSuccessful);
        System.out.println("money " + petesCard.balance());

        wasSuccessful = petesCard.takeMoney(4);
        System.out.println("successfully withdrew: " + wasSuccessful);
        System.out.println("money " + petesCard.balance());
    }
}

#Cash register

package the_Seven;

public class PaymentTerminal {
    private double money;  // amount of cash
    private int affordableMeals; // number of sold affordable meals
    private int heartyMeals;  // number of sold hearty meals

    public PaymentTerminal() {
        this.money=1000;
        this.affordableMeals=affordableMeals;
        this.heartyMeals=heartyMeals;
    }

    public double eatAffordably(double payment) {
    	if(payment>=2.5) {
    		this.affordableMeals++;
    		this.money+=2.5;
    		return payment-2.5;
    	}
    	
    	return payment;
        
    }

    public double eatHeartily(double payment) {
    	if(payment>=4.3) {
    		this.heartyMeals++;
    		this.money+=4.3;
    		return payment-4.3;
    	}
    	
    	return payment;
    }

    public String toString() {
        return "money: " + money + ", number of sold afforable meals: " + affordableMeals + ", number of sold hearty meals: " + heartyMeals;
    }
    
    public static void main(String[] args) {
        PaymentTerminal unicafeExactum = new PaymentTerminal();

        double change = unicafeExactum.eatAffordably(10);
        System.out.println("remaining change " + change);

        change = unicafeExactum.eatAffordably(5);
        System.out.println("remaining change " + change);

        change = unicafeExactum.eatHeartily(4.3);
        System.out.println("remaining change " + change);

        System.out.println(unicafeExactum);
    }
}

#Compare pricing of two apartments and return which is expensive

package the_Seven;

public class Apartment {
	private int rooms;
	private int squares;
	private int pricePerSquare;

	public Apartment(int rooms, int squares, int pricePerSquare) {
		this.rooms=rooms;
		this.squares=squares;
		this.pricePerSquare=pricePerSquare;
	}
	
	public boolean largerThan(Apartment name) {
		if(this.rooms<name.rooms) {
			return false;
		}
		if(this.rooms>name.rooms) {
			return true;
		}
		if(this.squares<name.squares) {
			return false;
		}
		if(this.squares<name.squares) {
			return true;
		}
		if(this.pricePerSquare<name.pricePerSquare) {
			return false;
		}
		return true;
	}
	
	public int priceDifference(Apartment compared) {
		return (this.squares*this.pricePerSquare)-(compared.squares*compared.pricePerSquare);
	}
	
	public boolean moreExpensiveThan(Apartment compared) {
		if((this.squares*this.pricePerSquare) > (compared.squares*compared.pricePerSquare)){
			return true;
		}
		return false;
	}

	public static void main(String[] args) {
		
		Apartment manhattanStudioApt = new Apartment(1, 16, 5500);
		Apartment atlantaTwoBedroomApt = new Apartment(2, 38, 4200);
		Apartment bangorThreeBedroomApt = new Apartment(3, 78, 2500);

		System.out.println(manhattanStudioApt.moreExpensiveThan(atlantaTwoBedroomApt));  // false
		System.out.println(bangorThreeBedroomApt.moreExpensiveThan(atlantaTwoBedroomApt));   // true

	}

}

#Read input from the user and print the list if the identifier or name is empty

package the_Seven;
import java.util.*;

public class Identifier {
	ArrayList <String> identifier;
	ArrayList <String> name;

	public Identifier(ArrayList <String>identifier, ArrayList <String> name) {
		
		this.identifier=identifier;
		this.name=name;
		
		System.out.println("==Items==");
		
		for (int i=0; i<name.size();i++) {
			
				System.out.println(identifier.get(i) + ": " + name.get(i));
			
	}
	}
	
	public static void main(String[] args) {
		ArrayList <String> identifiers = new ArrayList<>();
		ArrayList <String> names = new ArrayList<>();
		
		
		while(true) {
			
			System.out.println("Enter the Identifier");
			Scanner input = new Scanner(System.in);
			
			String ID = input.nextLine();
			if (ID.isEmpty()) {
				
				break;
			}
			identifiers.add(ID);
			
			System.out.println("Enter the name");
			String name = input.nextLine();
			if (name.isEmpty()) {
				
				break;
			}
			
			
			names.add(name);
			
		}
		
		 Identifier ID = new Identifier(identifiers, names);
	
		}
	
		
	}

#add given days to date and print future date. This still needs work, throwing incorrect results

package the_Seven;

public class SimpleDate {
    private int day;
    private int month;
    private int year;

    public SimpleDate(int day, int month, int year) {
        this.day = day;
        this.month = month;
        this.year = year;
    }

    public String toString() {
        return this.day + "." + this.month + "." + this.year;
    }

    public boolean before(SimpleDate compared) {
        // first compare years
        if (this.year < compared.year) {
            return true;
        }

        // if the years are the same, compare months
        if (this.year == compared.year && this.month < compared.month) {
            return true;
        }

        // the years and the months are the same, compare days
        if (this.year == compared.year && this.month == compared.month &&
            this.day < compared.day) {
            return true;
        }

        return false;
    }
    
    public void advance() {
    	
    	if(this.day<=30) {
    		this.day+=1;
    	}
    	else {
    		this.day=this.day-30;
    		this.month+=1;
    	}
    
    	
    	
    	if(this.month<=12) {
    		this.year=this.year;
    	}
    	
    	else {
    		this.year+=1;
    		this.month=this.month-12;
    	}
    		
    	}
    
    
    
    public void advance(int howManyDays) {
    	
    	if(this.day<=30) {
    		this.day+=howManyDays;
    		    		
    	}
    	
    	else {
    		this.day=this.day-30;
    		this.month+=1;
    	}
    	
        	
    	if(this.month<=12) {
    		this.year=this.year;
    	}
    	
    	else {
    		this.year+=1;
    		this.month=this.month-12;
    	}
        	
    		
    	}
    	
    
    
    public SimpleDate afterNumberOfDays(int days) {
    	SimpleDate newDate = new SimpleDate(this.day, this.month, this.year);
    	
    	newDate.advance(days);
    	return newDate;
    }
    
    public static void main(String[] args) {
        SimpleDate date = new SimpleDate(13, 2, 2015);
        System.out.println("Friday of the examined week is " + date);

        SimpleDate newDate = date.afterNumberOfDays(7);
        int week = 1;
        while (week <= 7) {
            System.out.println("Friday after " + week + " weeks is " + newDate);
            newDate = newDate.afterNumberOfDays(7);

            week = week + 1;
        }


        System.out.println("The date after 790 days from the examined Friday is ... " + date.afterNumberOfDays(790));
        
    }
}


